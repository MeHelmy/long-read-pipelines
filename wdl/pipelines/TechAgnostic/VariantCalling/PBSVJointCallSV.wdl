version 1.0

import "../../../tasks/VariantCalling/PBSV.wdl"
import "../../../tasks/Utility/Finalize.wdl" as FF
import "../../../tasks/Utility/Utils.wdl"

workflow PBSVJointCallSV {
    meta {
        desciption: "Perform joint SV calling with PBSV using svsig file (also generated by PBSV)"
    }
    input {
        File? list_of_svsigs
        Array[File]? sv_sigs
        Boolean is_hifi

        File ref_map_file

        String out_prefix

        Int cores
        String disk_type = "HDD"

        String gcs_out_root_dir
    }

    output {

    }

    if (!(defined(list_of_svsigs) || defined(sv_sigs))) {
        call Utils.StopWorkflow as MissingInputs {input: reason = "Please provide as least one valid input"}
    }
    if (defined(list_of_svsigs) && defined(sv_sigs)) {
        call Utils.StopWorkflow as MutexInputs {input: reason = "Please provide only one of [list_of_svsigs, sv_sigs]"}
    }

    String workflow_name = 'PBSVJointCallSV'
    String outdir = sub(gcs_out_root_dir, "/$", "") + "/~{workflow_name}"

    ##################
    Array[File] cohort_svsigs = if (defined(list_of_svsigs) ) then read_lines(select_first([list_of_svsigs])) else select_first([sv_sigs])

    Map[String, String] ref_map = read_map(ref_map_file)
    call PBSV.Joint as PBSVJoint { input:
        svsigs = cohort_svsigs,
        ref_fasta = ref_map['fasta'],
        ref_fasta_fai = ref_map['fai'],
        is_hifi = is_hifi,
        prefix = out_prefix,

        cores = cores,
        disk_type = disk_type
    }

    ##################
    call FF.FinalizeToFile as FinalizeVCF { input: outdir = outdir, file = PBSVJoint.vcf }
    call FF.FinalizeToFile as FinalizeTBI { input: outdir = outdir, file = PBSVJoint.tbi }
}
